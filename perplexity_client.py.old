"""
LABRYS Perplexity API Client (Python)
Analytical Blade Research Engine
"""

import os
import requests
import json
from typing import Dict, List, Optional
from dotenv import load_dotenv

load_dotenv()

class PerplexityClient:
    def __init__(self, api_key: Optional[str] = None):
        self.api_key = api_key or os.getenv('PERPLEXITY_API_KEY')
        self.base_url = "https://api.perplexity.ai/chat/completions"
        self.headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
    
    def research(self, query: str, model: str = "llama-3.1-sonar-small-128k-online") -> Dict:
        """
        Perform research query using Perplexity API
        Part of the Analytical Blade functionality
        """
        payload = {
            "model": model,
            "messages": [
                {
                    "role": "system",
                    "content": "You are a helpful research assistant providing accurate, up-to-date information."
                },
                {
                    "role": "user", 
                    "content": query
                }
            ],
            "max_tokens": 2000,
            "temperature": 0.2,
            "top_p": 0.9,
            "stream": False
        }
        
        try:
            response = requests.post(self.base_url, json=payload, headers=self.headers)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            return {"error": str(e)}
    
    def analyze_code_patterns(self, code_snippet: str) -> Dict:
        """
        Analyze code patterns and provide insights
        Analytical Blade functionality
        """
        query = f"""
        Analyze this code snippet for patterns, potential issues, and improvements:
        
        ```
        {code_snippet}
        ```
        
        Provide analysis on:
        1. Code quality and patterns
        2. Potential security issues
        3. Performance considerations
        4. Best practices recommendations
        """
        
        return self.research(query)
    
    def feasibility_assessment(self, project_description: str) -> Dict:
        """
        Assess implementation feasibility
        Analytical Blade functionality
        """
        query = f"""
        Assess the technical feasibility of this project:
        
        {project_description}
        
        Provide analysis on:
        1. Technical complexity
        2. Resource requirements
        3. Potential challenges
        4. Implementation timeline
        5. Required technologies
        """
        
        return self.research(query)

if __name__ == "__main__":
    client = PerplexityClient()
    print("Perplexity Client initialized - Analytical Blade ready")