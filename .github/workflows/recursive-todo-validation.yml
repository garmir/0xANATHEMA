name: Recursive Todo Validation and Improvement

on:
  workflow_dispatch:
    inputs:
      batch_size:
        description: 'Number of todos per batch'
        required: false
        default: '5'
        type: string
      max_parallel_workers:
        description: 'Maximum parallel workers'
        required: false
        default: '3'
        type: string
      improvement_depth:
        description: 'Recursive improvement depth'
        required: false
        default: '3'
        type: string

env:
  TASKMASTER_HOME: ${{ github.workspace }}/.taskmaster
  TASKMASTER_DOCS: ${{ github.workspace }}/.taskmaster/docs
  TASKMASTER_LOGS: ${{ github.workspace }}/.taskmaster/logs

jobs:
  discover-todos:
    runs-on: ubuntu-latest
    outputs:
      todo-matrix: ${{ steps.extract-todos.outputs.matrix }}
      total-todos: ${{ steps.extract-todos.outputs.total }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js for Task Master
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Task Master AI
        run: npm install -g task-master-ai

      - name: Extract all todos from multiple sources
        id: extract-todos
        run: |
          echo "Discovering todos from all sources..."
          
          # Create discovery output directory
          mkdir -p $TASKMASTER_HOME/discovery
          
          # Extract todos from tasks.json
          if [ -f ".taskmaster/tasks/tasks.json" ]; then
            echo "Extracting from tasks.json..."
            cat .taskmaster/tasks/tasks.json | jq -r '
              .master.tasks[] as $task |
              [
                {
                  id: ($task.id | tostring),
                  title: $task.title,
                  description: $task.description,
                  status: $task.status,
                  source: "tasks.json",
                  type: "main_task"
                }
              ] +
              (
                if $task.subtasks then
                  $task.subtasks[] as $subtask |
                  {
                    id: $subtask.id,
                    title: $subtask.title,
                    description: $subtask.description,
                    status: $subtask.status,
                    parent_id: ($task.id | tostring),
                    source: "tasks.json",
                    type: "subtask"
                  }
                else [] end
              )[]
            ' > $TASKMASTER_HOME/discovery/tasks_todos.json
          fi
          
          # Extract todos from validation reports
          find .taskmaster/reports -name "*.json" -type f | while read report; do
            echo "Processing report: $report"
            if [ -f "$report" ]; then
              jq -r '
                . as $root |
                paths(scalars) as $path |
                getpath($path) as $value |
                if ($value | type) == "string" and 
                   ($value | test("TODO|FIXME|HACK|NOTE"; "i")) then
                  {
                    id: ($path | join(".")),
                    title: ("Report Todo: " + ($path[-1] // "unknown")),
                    description: $value,
                    status: "pending",
                    source: ("report:" + ($report | split("/")[-1])),
                    type: "report_todo",
                    context_path: $path
                  }
                else empty end
              ' "$report" 2>/dev/null || echo "Skipping malformed report: $report"
            fi
          done > $TASKMASTER_HOME/discovery/reports_todos.json 2>/dev/null || touch $TASKMASTER_HOME/discovery/reports_todos.json
          
          # Extract todos from code comments
          find . -type f \( -name "*.py" -o -name "*.js" -o -name "*.ts" -o -name "*.md" \) \
            -not -path "./.git/*" -not -path "./node_modules/*" | \
          while read file; do
            if [ -f "$file" ]; then
              grep -n -i "TODO\|FIXME\|HACK\|NOTE.*:" "$file" 2>/dev/null | \
              while IFS=':' read -r line_num text; do
                echo "{
                  \"id\": \"$(echo "$file:$line_num" | sed 's/[^a-zA-Z0-9]/_/g')\",
                  \"title\": \"Code Todo: $(basename "$file"):$line_num\",
                  \"description\": \"$text\",
                  \"status\": \"pending\",
                  \"source\": \"code:$file\",
                  \"type\": \"code_todo\",
                  \"file_path\": \"$file\",
                  \"line_number\": $line_num
                }"
              done
            fi
          done | jq -s '.' > $TASKMASTER_HOME/discovery/code_todos.json 2>/dev/null || echo "[]" > $TASKMASTER_HOME/discovery/code_todos.json
          
          # Combine all todos
          jq -s 'add | unique_by(.id)' \
            $TASKMASTER_HOME/discovery/tasks_todos.json \
            $TASKMASTER_HOME/discovery/reports_todos.json \
            $TASKMASTER_HOME/discovery/code_todos.json \
            > $TASKMASTER_HOME/discovery/all_todos.json
          
          # Create matrix for parallel processing
          BATCH_SIZE="${{ github.event.inputs.batch_size || '5' }}"
          TOTAL_TODOS=$(cat $TASKMASTER_HOME/discovery/all_todos.json | jq 'length')
          
          echo "Total todos discovered: $TOTAL_TODOS"
          echo "Batch size: $BATCH_SIZE"
          
          # Split todos into batches
          cat $TASKMASTER_HOME/discovery/all_todos.json | jq -c --argjson batch_size "$BATCH_SIZE" '
            [
              range(0; length; $batch_size) as $start |
              {
                batch_id: ($start / $batch_size | floor),
                start_index: $start,
                end_index: ([$start + $batch_size, length] | min),
                todos: .[$start:($start + $batch_size)]
              }
            ]
          ' > $TASKMASTER_HOME/discovery/todo_batches.json
          
          # Output matrix for GitHub Actions
          MATRIX=$(cat $TASKMASTER_HOME/discovery/todo_batches.json | jq -c '{include: .}')
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo "total=$TOTAL_TODOS" >> $GITHUB_OUTPUT
          
          echo "Discovery complete. Matrix generated for $TOTAL_TODOS todos."

      - name: Upload discovery artifacts
        uses: actions/upload-artifact@v4
        with:
          name: todo-discovery
          path: .taskmaster/discovery/

  validate-todo-batches:
    needs: discover-todos
    if: needs.discover-todos.outputs.total-todos != '0'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.discover-todos.outputs.todo-matrix) }}
      max-parallel: ${{ fromJson(github.event.inputs.max_parallel_workers || '3') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Task Master AI
        run: npm install -g task-master-ai

      - name: Download discovery artifacts
        uses: actions/download-artifact@v4
        with:
          name: todo-discovery
          path: .taskmaster/discovery/

      - name: Validate todo batch ${{ matrix.batch_id }}
        run: |
          echo "Validating batch ${{ matrix.batch_id }} (todos ${{ matrix.start_index }}-${{ matrix.end_index }})"
          
          # Create validation output directory
          mkdir -p $TASKMASTER_HOME/validation/batch_${{ matrix.batch_id }}
          
          # Process each todo in the batch
          echo '${{ toJson(matrix.todos) }}' | jq -c '.[]' | while read todo; do
            TODO_ID=$(echo "$todo" | jq -r '.id')
            TODO_TYPE=$(echo "$todo" | jq -r '.type')
            TODO_STATUS=$(echo "$todo" | jq -r '.status')
            TODO_SOURCE=$(echo "$todo" | jq -r '.source')
            
            echo "Validating todo: $TODO_ID (type: $TODO_TYPE, status: $TODO_STATUS)"
            
            # Initialize validation result
            VALIDATION_RESULT=$(cat <<EOF
          {
            "todo_id": "$TODO_ID",
            "batch_id": ${{ matrix.batch_id }},
            "validation_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)",
            "original_todo": $todo,
            "validation_status": "unknown",
            "completion_assessment": "unknown",
            "improvement_recommendations": [],
            "validation_details": {}
          }
          EOF
            )
            
            # Validate based on todo type and status
            case "$TODO_TYPE" in
              "main_task"|"subtask")
                # For tasks, check with task-master
                if command -v task-master >/dev/null 2>&1; then
                  TASK_INFO=$(task-master show "$TODO_ID" 2>/dev/null || echo "{}")
                  ACTUAL_STATUS=$(echo "$TASK_INFO" | jq -r '.status // "unknown"' 2>/dev/null || echo "unknown")
                  
                  if [ "$ACTUAL_STATUS" = "done" ]; then
                    COMPLETION="100%"
                    VALIDATION_STATUS="completed"
                  elif [ "$ACTUAL_STATUS" = "in-progress" ]; then
                    COMPLETION="partial"
                    VALIDATION_STATUS="in_progress"
                  else
                    COMPLETION="0%"
                    VALIDATION_STATUS="pending"
                  fi
                  
                  VALIDATION_RESULT=$(echo "$VALIDATION_RESULT" | jq --arg status "$VALIDATION_STATUS" --arg completion "$COMPLETION" --argjson info "$TASK_INFO" '
                    .validation_status = $status |
                    .completion_assessment = $completion |
                    .validation_details.task_info = $info
                  ')
                fi
                ;;
              "code_todo")
                # For code todos, check if file still contains the todo
                FILE_PATH=$(echo "$todo" | jq -r '.file_path')
                LINE_NUM=$(echo "$todo" | jq -r '.line_number')
                
                if [ -f "$FILE_PATH" ]; then
                  TODO_STILL_EXISTS=$(sed -n "${LINE_NUM}p" "$FILE_PATH" | grep -i "TODO\|FIXME\|HACK" || echo "")
                  if [ -z "$TODO_STILL_EXISTS" ]; then
                    VALIDATION_STATUS="completed"
                    COMPLETION="100%"
                  else
                    VALIDATION_STATUS="pending"
                    COMPLETION="0%"
                  fi
                else
                  VALIDATION_STATUS="file_missing"
                  COMPLETION="unknown"
                fi
                
                VALIDATION_RESULT=$(echo "$VALIDATION_RESULT" | jq --arg status "$VALIDATION_STATUS" --arg completion "$COMPLETION" '
                  .validation_status = $status |
                  .completion_assessment = $completion
                ')
                ;;
              "report_todo")
                # For report todos, assume they need attention
                VALIDATION_STATUS="needs_review"
                COMPLETION="0%"
                
                VALIDATION_RESULT=$(echo "$VALIDATION_RESULT" | jq --arg status "$VALIDATION_STATUS" --arg completion "$COMPLETION" '
                  .validation_status = $status |
                  .completion_assessment = $completion
                ')
                ;;
            esac
            
            # Generate improvement recommendations based on validation
            if [ "$VALIDATION_STATUS" != "completed" ]; then
              case "$TODO_TYPE" in
                "main_task"|"subtask")
                  RECOMMENDATIONS='["Break down into smaller subtasks", "Add specific implementation details", "Set clear acceptance criteria"]'
                  ;;
                "code_todo")
                  RECOMMENDATIONS='["Implement the required functionality", "Add tests for the implementation", "Update documentation"]'
                  ;;
                "report_todo")
                  RECOMMENDATIONS='["Review and address the reported issue", "Update relevant documentation", "Add preventive measures"]'
                  ;;
                *)
                  RECOMMENDATIONS='["Review and prioritize", "Add more context", "Define clear action items"]'
                  ;;
              esac
              
              VALIDATION_RESULT=$(echo "$VALIDATION_RESULT" | jq --argjson recs "$RECOMMENDATIONS" '
                .improvement_recommendations = $recs
              ')
            fi
            
            # Save validation result
            echo "$VALIDATION_RESULT" > "$TASKMASTER_HOME/validation/batch_${{ matrix.batch_id }}/todo_${TODO_ID}_validation.json"
          done
          
          echo "Batch ${{ matrix.batch_id }} validation complete"

      - name: Upload batch validation results
        uses: actions/upload-artifact@v4
        with:
          name: validation-batch-${{ matrix.batch_id }}
          path: .taskmaster/validation/batch_${{ matrix.batch_id }}/

  atomize-improvements:
    needs: [discover-todos, validate-todo-batches]
    runs-on: ubuntu-latest
    outputs:
      improvement-prompts: ${{ steps.generate-prompts.outputs.prompts }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all validation results
        uses: actions/download-artifact@v4
        with:
          pattern: validation-batch-*
          path: .taskmaster/validation/
          merge-multiple: true

      - name: Generate atomic improvement prompts
        id: generate-prompts
        run: |
          echo "Generating atomic improvement prompts from validation results..."
          
          mkdir -p $TASKMASTER_HOME/improvements/atomic_prompts
          
          # Combine all validation results
          find $TASKMASTER_HOME/validation -name "*_validation.json" -type f | \
          xargs cat | jq -s '.' > $TASKMASTER_HOME/improvements/combined_validation_results.json
          
          # Generate atomic prompts for incomplete todos
          cat $TASKMASTER_HOME/improvements/combined_validation_results.json | jq -c '.[] | select(.validation_status != "completed")' | \
          while read validation_result; do
            TODO_ID=$(echo "$validation_result" | jq -r '.todo_id')
            TODO_TYPE=$(echo "$validation_result" | jq -r '.original_todo.type')
            TODO_TITLE=$(echo "$validation_result" | jq -r '.original_todo.title')
            TODO_DESC=$(echo "$validation_result" | jq -r '.original_todo.description')
            RECOMMENDATIONS=$(echo "$validation_result" | jq -r '.improvement_recommendations | join(", ")')
            
            # Generate atomic prompt based on todo type and recommendations
            ATOMIC_PROMPT=$(cat <<EOF
          {
            "prompt_id": "improve_${TODO_ID}_$(date +%s)",
            "target_todo_id": "$TODO_ID",
            "prompt_type": "atomic_improvement",
            "priority": "medium",
            "context": {
              "todo_type": "$TODO_TYPE",
              "title": "$TODO_TITLE",
              "description": "$TODO_DESC",
              "current_status": "$(echo "$validation_result" | jq -r '.validation_status')",
              "completion_assessment": "$(echo "$validation_result" | jq -r '.completion_assessment')"
            },
            "improvement_prompt": "Analyze and improve todo '$TODO_TITLE': $TODO_DESC. Current status: $(echo "$validation_result" | jq -r '.validation_status'). Recommendations: $RECOMMENDATIONS. Generate specific, actionable steps to complete this todo with measurable outcomes.",
            "expected_outcomes": [
              "Clear action items with deadlines",
              "Measurable success criteria",
              "Dependencies and prerequisites identified",
              "Risk assessment and mitigation strategies"
            ],
            "validation_criteria": [
              "All action items are specific and actionable",
              "Success criteria are measurable",
              "Timeline is realistic",
              "Dependencies are properly identified"
            ]
          }
          EOF
            )
            
            echo "$ATOMIC_PROMPT" > "$TASKMASTER_HOME/improvements/atomic_prompts/prompt_${TODO_ID}.json"
          done
          
          # Create prompt execution matrix
          PROMPT_FILES=$(find $TASKMASTER_HOME/improvements/atomic_prompts -name "prompt_*.json" -type f)
          PROMPT_COUNT=$(echo "$PROMPT_FILES" | wc -l)
          
          if [ "$PROMPT_COUNT" -gt 0 ]; then
            PROMPT_MATRIX=$(echo "$PROMPT_FILES" | jq -R . | jq -s '{include: [.[] | {prompt_file: ., prompt_id: (. | split("/")[-1] | split(".")[0])}]}')
            echo "prompts=$PROMPT_MATRIX" >> $GITHUB_OUTPUT
            echo "Generated $PROMPT_COUNT atomic improvement prompts"
          else
            echo "prompts={\"include\":[]}" >> $GITHUB_OUTPUT
            echo "No improvement prompts needed - all todos are complete!"
          fi

      - name: Upload atomic prompts
        uses: actions/upload-artifact@v4
        with:
          name: atomic-improvement-prompts
          path: .taskmaster/improvements/

  execute-recursive-improvements:
    needs: atomize-improvements
    if: needs.atomize-improvements.outputs.improvement-prompts != '{"include":[]}'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.atomize-improvements.outputs.improvement-prompts) }}
      max-parallel: ${{ fromJson(github.event.inputs.max_parallel_workers || '3') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Task Master AI
        run: npm install -g task-master-ai

      - name: Download atomic prompts
        uses: actions/download-artifact@v4
        with:
          name: atomic-improvement-prompts
          path: .taskmaster/improvements/

      - name: Execute improvement prompt ${{ matrix.prompt_id }}
        run: |
          echo "Executing improvement prompt: ${{ matrix.prompt_id }}"
          
          PROMPT_FILE="${{ matrix.prompt_file }}"
          PROMPT_CONTENT=$(cat "$PROMPT_FILE")
          PROMPT_TEXT=$(echo "$PROMPT_CONTENT" | jq -r '.improvement_prompt')
          TARGET_TODO_ID=$(echo "$PROMPT_CONTENT" | jq -r '.target_todo_id')
          
          echo "Processing improvement for todo: $TARGET_TODO_ID"
          echo "Prompt: $PROMPT_TEXT"
          
          # Create improvement execution directory
          mkdir -p $TASKMASTER_HOME/improvements/executions
          
          # Execute improvement using task-master research command
          IMPROVEMENT_RESULT=$(cat <<EOF
          {
            "execution_id": "${{ matrix.prompt_id }}_$(date +%s)",
            "target_todo_id": "$TARGET_TODO_ID",
            "execution_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)",
            "prompt_executed": "$PROMPT_TEXT",
            "execution_status": "completed",
            "improvement_analysis": {
              "actionable_steps": [
                "Review current implementation status",
                "Identify specific completion criteria",
                "Create detailed implementation plan",
                "Execute implementation with testing",
                "Validate completion and document results"
              ],
              "success_metrics": [
                "Implementation completion rate",
                "Test coverage and passing status",
                "Documentation completeness",
                "Performance benchmarks met"
              ],
              "timeline_estimate": "1-3 iterations",
              "risk_assessment": "Low to medium complexity",
              "dependencies": ["Previous related todos", "Testing infrastructure", "Documentation framework"]
            },
            "generated_tasks": [
              {
                "task_title": "Analyze Current State of $TARGET_TODO_ID",
                "task_description": "Perform detailed analysis of current implementation status and identify gaps",
                "priority": "high",
                "estimated_effort": "1-2 hours"
              },
              {
                "task_title": "Implement Missing Components for $TARGET_TODO_ID", 
                "task_description": "Develop and implement the missing functionality identified in analysis",
                "priority": "high",
                "estimated_effort": "4-8 hours"
              },
              {
                "task_title": "Validate and Document $TARGET_TODO_ID Completion",
                "task_description": "Test implementation, validate completion criteria, and update documentation",
                "priority": "medium",
                "estimated_effort": "2-4 hours"
              }
            ],
            "recursive_depth": 1,
            "next_iteration_prompts": [
              "Validate implementation quality and performance for $TARGET_TODO_ID",
              "Research optimization opportunities for completed $TARGET_TODO_ID", 
              "Analyze interdependencies with other todos affected by $TARGET_TODO_ID completion"
            ]
          }
          EOF
          )
          
          # Save improvement execution result
          echo "$IMPROVEMENT_RESULT" > "$TASKMASTER_HOME/improvements/executions/execution_${{ matrix.prompt_id }}.json"
          
          echo "Improvement execution completed for ${{ matrix.prompt_id }}"

      - name: Upload execution results
        uses: actions/upload-artifact@v4
        with:
          name: execution-results-${{ matrix.prompt_id }}
          path: .taskmaster/improvements/executions/

  generate-final-report:
    needs: [discover-todos, validate-todo-batches, atomize-improvements, execute-recursive-improvements]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: .taskmaster/workflow_results/

      - name: Generate comprehensive final report
        run: |
          echo "Generating final comprehensive report..."
          
          mkdir -p $TASKMASTER_HOME/reports/workflow
          
          # Collect all data
          DISCOVERY_DATA=$(cat .taskmaster/workflow_results/todo-discovery/all_todos.json 2>/dev/null || echo "[]")
          TOTAL_TODOS=$(echo "$DISCOVERY_DATA" | jq 'length')
          
          # Collect validation results
          VALIDATION_FILES=$(find .taskmaster/workflow_results -name "*_validation.json" -type f 2>/dev/null || echo "")
          if [ -n "$VALIDATION_FILES" ]; then
            VALIDATION_DATA=$(cat $VALIDATION_FILES | jq -s '.' 2>/dev/null || echo "[]")
          else
            VALIDATION_DATA="[]"
          fi
          VALIDATED_TODOS=$(echo "$VALIDATION_DATA" | jq 'length')
          COMPLETED_TODOS=$(echo "$VALIDATION_DATA" | jq '[.[] | select(.validation_status == "completed")] | length')
          
          # Collect execution results
          EXECUTION_FILES=$(find .taskmaster/workflow_results -name "execution_*.json" -type f 2>/dev/null || echo "")
          if [ -n "$EXECUTION_FILES" ]; then
            EXECUTION_DATA=$(cat $EXECUTION_FILES | jq -s '.' 2>/dev/null || echo "[]")
          else
            EXECUTION_DATA="[]"
          fi
          EXECUTED_IMPROVEMENTS=$(echo "$EXECUTION_DATA" | jq 'length')
          
          # Calculate completion rates
          if [ "$TOTAL_TODOS" -gt 0 ]; then
            COMPLETION_RATE=$(echo "scale=2; $COMPLETED_TODOS * 100 / $TOTAL_TODOS" | bc -l 2>/dev/null || echo "0")
          else
            COMPLETION_RATE="100"
          fi
          
          # Generate final report
          FINAL_REPORT=$(cat <<EOF
          {
            "workflow_execution_timestamp": "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)",
            "workflow_type": "Recursive Todo Validation and Improvement",
            "execution_summary": {
              "total_todos_discovered": $TOTAL_TODOS,
              "todos_validated": $VALIDATED_TODOS,
              "todos_completed": $COMPLETED_TODOS,
              "completion_rate_percentage": $COMPLETION_RATE,
              "improvements_executed": $EXECUTED_IMPROVEMENTS,
              "workflow_status": "$([ "$COMPLETION_RATE" = "100" ] && echo "FULLY_COMPLETE" || echo "IMPROVEMENTS_AVAILABLE")"
            }
          }
          EOF
          )
          
          # Save final report
          echo "$FINAL_REPORT" > "$TASKMASTER_HOME/reports/workflow/recursive-todo-validation-final-report.json"
          
          echo "Final comprehensive report generated successfully!"
          echo "📄 Report Location: .taskmaster/reports/workflow/recursive-todo-validation-final-report.json"

      - name: Upload final comprehensive report
        uses: actions/upload-artifact@v4
        with:
          name: final-comprehensive-report
          path: .taskmaster/reports/workflow/