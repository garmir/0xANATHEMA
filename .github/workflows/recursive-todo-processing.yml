name: Recursive Todo Processing with Parallel Runners

on:
  workflow_dispatch:
    inputs:
      max_parallel_runners:
        description: 'Maximum number of parallel runners'
        required: false
        default: '10'
        type: string
      depth_limit:
        description: 'Maximum recursion depth for todo atomization'
        required: false
        default: '5'
        type: string
      validation_mode:
        description: 'Validation strictness (strict/moderate/lenient)'
        required: false
        default: 'moderate'
        type: choice
        options:
          - strict
          - moderate
          - lenient
  push:
    paths:
      - '.taskmaster/tasks/**'
      - '.github/workflows/recursive-todo-processing.yml'
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  TASKMASTER_HOME: ${{ github.workspace }}/.taskmaster
  MAX_PARALLEL_RUNNERS: ${{ github.event.inputs.max_parallel_runners || '10' }}
  RECURSION_DEPTH: ${{ github.event.inputs.depth_limit || '5' }}
  VALIDATION_MODE: ${{ github.event.inputs.validation_mode || 'moderate' }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
  PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

jobs:
  
  # Phase 1: Extract and analyze all todos
  extract-todos:
    runs-on: ubuntu-latest
    outputs:
      todo-matrix: ${{ steps.extract.outputs.todo-matrix }}
      total-todos: ${{ steps.extract.outputs.total-todos }}
      batch-size: ${{ steps.extract.outputs.batch-size }}
      extraction-report: ${{ steps.extract.outputs.extraction-report }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for complete todo extraction
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install Task Master AI
        run: |
          npm install -g task-master-ai
      continue-on-error: true
          task-master init --force
      
      - name: Extract todos recursively
        id: extract
        run: |
          echo "🔍 Starting recursive todo extraction..."
          
          # Create extraction output directory
          mkdir -p $TASKMASTER_HOME/extraction
          
          # Extract todos from task history
          node .github/scripts/extract-todos.js \
            --output $TASKMASTER_HOME/extraction/todos.json \
            --depth $RECURSION_DEPTH \
            --include-history \
            --include-subtasks \
            --include-dependencies
          
          # Generate processing matrix
          node .github/scripts/generate-matrix.js \
            --input $TASKMASTER_HOME/extraction/todos.json \
            --max-parallel $MAX_PARALLEL_RUNNERS \
            --output $TASKMASTER_HOME/extraction/matrix.json
          
          # Set outputs
          TODO_MATRIX=$(cat $TASKMASTER_HOME/extraction/matrix.json)
          TOTAL_TODOS=$(jq '.total_todos' $TASKMASTER_HOME/extraction/todos.json)
          BATCH_SIZE=$(jq '.batch_size' $TASKMASTER_HOME/extraction/matrix.json)
          
          echo "todo-matrix=$TODO_MATRIX" >> $GITHUB_OUTPUT
          echo "total-todos=$TOTAL_TODOS" >> $GITHUB_OUTPUT
          echo "batch-size=$BATCH_SIZE" >> $GITHUB_OUTPUT
          
          # Generate extraction report
          echo "📊 Extraction Summary:" > extraction-report.md
          echo "- Total todos extracted: $TOTAL_TODOS" >> extraction-report.md
          echo "- Parallel runners: $MAX_PARALLEL_RUNNERS" >> extraction-report.md
          echo "- Batch size per runner: $BATCH_SIZE" >> extraction-report.md
          echo "- Recursion depth: $RECURSION_DEPTH" >> extraction-report.md
          
          EXTRACTION_REPORT=$(cat extraction-report.md)
          echo "extraction-report=$EXTRACTION_REPORT" >> $GITHUB_OUTPUT
      
      - name: Upload extraction artifacts
        uses: actions/upload-artifact@v4
        with:
          name: todo-extraction
          path: |
            .taskmaster/extraction/
            extraction-report.md
          retention-days: 30

  # Phase 2: Process todos in parallel batches
  process-todos:
    runs-on: ubuntu-latest
    needs: extract-todos
    if: needs.extract-todos.outputs.total-todos > 0
    strategy:
      matrix:
        batch: ${{ fromJson(needs.extract-todos.outputs.todo-matrix) }}
      max-parallel: ${{ fromJson(github.event.inputs.max_parallel_runners || '10') }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          npm install -g task-master-ai
      continue-on-error: true
          python -m pip install --upgrade pip
        pip install ollama anthropic perplexity-client
          task-master init --force
      
      - name: Download extraction artifacts
        uses: actions/download-artifact@v4
        with:
          name: todo-extraction
          path: .taskmaster/extraction/
      
      - name: Process todo batch
        id: process
        run: |
          echo "🚀 Processing batch ${{ matrix.batch.id }} with ${{ matrix.batch.todo_count }} todos"
          
          # Create batch output directory
          mkdir -p $TASKMASTER_HOME/processing/batch-${{ matrix.batch.id }}
          
          # Process each todo in the batch
          node .github/scripts/process-batch.js \
            --batch-id ${{ matrix.batch.id }} \
            --input $TASKMASTER_HOME/extraction/todos.json \
            --output $TASKMASTER_HOME/processing/batch-${{ matrix.batch.id }}/results.json \
            --validation-mode $VALIDATION_MODE \
            --recursive-depth $RECURSION_DEPTH
          
          # Generate batch report
          echo "📋 Batch ${{ matrix.batch.id }} Results:" > batch-report.md
          echo "- Todos processed: ${{ matrix.batch.todo_count }}" >> batch-report.md
          echo "- Start time: $(date)" >> batch-report.md
          
          # Atomize todos recursively
          node .github/scripts/atomize-todos.js \
            --input $TASKMASTER_HOME/processing/batch-${{ matrix.batch.id }}/results.json \
            --output $TASKMASTER_HOME/processing/batch-${{ matrix.batch.id }}/atomized.json \
            --depth $RECURSION_DEPTH
          
          # Validate completion
          node .github/scripts/validate-completion.js \
            --input $TASKMASTER_HOME/processing/batch-${{ matrix.batch.id }}/atomized.json \
            --output $TASKMASTER_HOME/processing/batch-${{ matrix.batch.id }}/validation.json \
            --mode $VALIDATION_MODE
          
          echo "- End time: $(date)" >> batch-report.md
          echo "- Validation mode: $VALIDATION_MODE" >> batch-report.md
          
          # Check if batch completed successfully
          BATCH_SUCCESS=$(jq '.validation.success' $TASKMASTER_HOME/processing/batch-${{ matrix.batch.id }}/validation.json)
          echo "batch-success=$BATCH_SUCCESS" >> $GITHUB_OUTPUT
      
      - name: Upload batch results
        uses: actions/upload-artifact@v4
        with:
          name: batch-${{ matrix.batch.id }}-results
          path: |
            .taskmaster/processing/batch-${{ matrix.batch.id }}/
            batch-report.md
          retention-days: 15
      
      - name: Generate improvement prompts
        if: steps.process.outputs.batch-success == 'true'
        run: |
          echo "💡 Generating improvement prompts from batch results..."
          
          node .github/scripts/generate-improvement-prompts.js \
            --input $TASKMASTER_HOME/processing/batch-${{ matrix.batch.id }}/atomized.json \
            --output $TASKMASTER_HOME/processing/batch-${{ matrix.batch.id }}/improvement-prompts.json \
            --recursive
          
          # Execute improvement prompts
          node .github/scripts/execute-improvements.js \
            --input $TASKMASTER_HOME/processing/batch-${{ matrix.batch.id }}/improvement-prompts.json \
            --output $TASKMASTER_HOME/processing/batch-${{ matrix.batch.id }}/improvements.json

  # Phase 3: Consolidate and analyze results
  consolidate-results:
    runs-on: ubuntu-latest
    needs: [extract-todos, process-todos]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Download all batch results
        uses: actions/download-artifact@v4
        with:
          pattern: batch-*-results
          merge-multiple: true
          path: .taskmaster/consolidated/
      
      - name: Consolidate and analyze results
        run: |
          echo "🔄 Consolidating results from all batches..."
          
          # Install Task Master AI
          npm install -g task-master-ai
          task-master init --force
          
          # Consolidate all batch results
          node .github/scripts/consolidate-results.js \
            --input .taskmaster/consolidated/ \
            --output .taskmaster/consolidated/final-results.json \
            --generate-report
          
          # Generate comprehensive analysis
          node .github/scripts/analyze-results.js \
            --input .taskmaster/consolidated/final-results.json \
            --output .taskmaster/consolidated/analysis.json \
            --include-metrics \
            --include-recommendations
          
          # Create summary report
          echo "# Recursive Todo Processing Results" > PROCESSING_SUMMARY.md
          echo "" >> PROCESSING_SUMMARY.md
          echo "## Overview" >> PROCESSING_SUMMARY.md
          echo "- Total todos processed: ${{ needs.extract-todos.outputs.total-todos }}" >> PROCESSING_SUMMARY.md
          echo "- Parallel runners used: ${{ env.MAX_PARALLEL_RUNNERS }}" >> PROCESSING_SUMMARY.md
          echo "- Recursion depth: ${{ env.RECURSION_DEPTH }}" >> PROCESSING_SUMMARY.md
          echo "- Validation mode: ${{ env.VALIDATION_MODE }}" >> PROCESSING_SUMMARY.md
          echo "" >> PROCESSING_SUMMARY.md
          
          # Add detailed analysis
          node .github/scripts/generate-markdown-report.js \
            --input .taskmaster/consolidated/analysis.json \
            --output analysis-section.md
          
          cat analysis-section.md >> PROCESSING_SUMMARY.md
      
      - name: Upload consolidated results
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-results
          path: |
            .taskmaster/consolidated/
            PROCESSING_SUMMARY.md
          retention-days: 90
      
      - name: Create pull request with improvements
        if: github.event_name != 'pull_request'
        run: |
          # Check if there are improvements to apply
          IMPROVEMENTS_COUNT=$(jq '.improvements | length' .taskmaster/consolidated/final-results.json)
          
          if [ "$IMPROVEMENTS_COUNT" -gt 0 ]; then
            echo "🔧 Creating pull request with $IMPROVEMENTS_COUNT improvements..."
            
            # Apply improvements to codebase
            node .github/scripts/apply-improvements.js \
              --input .taskmaster/consolidated/final-results.json \
              --apply-to-files
            
            # Create branch and commit changes
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            
            BRANCH_NAME="recursive-improvements-$(date +%Y%m%d-%H%M%S)"
            git checkout -b $BRANCH_NAME
            
            git add .
            git commit -m "Apply recursive todo processing improvements
            
            - Processed ${{ needs.extract-todos.outputs.total-todos }} todos
            - Applied $IMPROVEMENTS_COUNT improvements
            - Used ${{ env.MAX_PARALLEL_RUNNERS }} parallel runners
            - Recursion depth: ${{ env.RECURSION_DEPTH }}
            
            🤖 Generated with recursive GitHub Actions processing"
            
            git push origin $BRANCH_NAME
            
            # Create pull request
            gh pr create \
              --title "Recursive Todo Processing Improvements" \
              --body "$(cat PROCESSING_SUMMARY.md)" \
              --head $BRANCH_NAME \
              --base main
          else
            echo "ℹ️ No improvements generated from todo processing"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Phase 4: Recursive feedback and continuous improvement
  recursive-feedback:
    runs-on: ubuntu-latest
    needs: [extract-todos, process-todos, consolidate-results]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Download consolidated results
        uses: actions/download-artifact@v4
        with:
          name: consolidated-results
          path: .taskmaster/feedback/
      
      - name: Generate recursive feedback
        run: |
          echo "🔄 Generating recursive feedback for continuous improvement..."
          
          npm install -g task-master-ai
          task-master init --force
          
          # Analyze processing effectiveness
          node .github/scripts/analyze-effectiveness.js \
            --input .taskmaster/feedback/final-results.json \
            --output .taskmaster/feedback/effectiveness-analysis.json \
            --historical-comparison
          
          # Generate improvement recommendations for the processing pipeline itself
          node .github/scripts/generate-pipeline-improvements.js \
            --input .taskmaster/feedback/effectiveness-analysis.json \
            --output .taskmaster/feedback/pipeline-improvements.json \
            --recursive
          
          # Update workflow parameters for next run
          node .github/scripts/optimize-parameters.js \
            --input .taskmaster/feedback/effectiveness-analysis.json \
            --output .taskmaster/feedback/optimized-parameters.json \
            --target-metrics execution_time,success_rate,coverage
          
          # Create feedback summary
          echo "# Recursive Feedback Analysis" > FEEDBACK_SUMMARY.md
          echo "" >> FEEDBACK_SUMMARY.md
          echo "## Processing Effectiveness" >> FEEDBACK_SUMMARY.md
          
          # Add effectiveness metrics
          node .github/scripts/format-feedback.js \
            --input .taskmaster/feedback/effectiveness-analysis.json \
            --output feedback-formatted.md
          
          cat feedback-formatted.md >> FEEDBACK_SUMMARY.md
      
      - name: Schedule recursive improvement
        run: |
          echo "🔄 Scheduling recursive improvement cycle..."
          
          # Check if recursive improvement is needed
          NEEDS_IMPROVEMENT=$(jq '.needs_improvement' .taskmaster/feedback/effectiveness-analysis.json)
          
          if [ "$NEEDS_IMPROVEMENT" = "true" ]; then
            echo "📈 Triggering recursive improvement workflow..."
            
            # Get optimized parameters
            OPTIMIZED_RUNNERS=$(jq '.optimized_parameters.max_parallel_runners' .taskmaster/feedback/optimized-parameters.json)
            OPTIMIZED_DEPTH=$(jq '.optimized_parameters.recursion_depth' .taskmaster/feedback/optimized-parameters.json)
            OPTIMIZED_VALIDATION=$(jq -r '.optimized_parameters.validation_mode' .taskmaster/feedback/optimized-parameters.json)
            
            # Trigger new workflow run with optimized parameters
            gh workflow run recursive-todo-processing.yml \
              --field max_parallel_runners="$OPTIMIZED_RUNNERS" \
              --field depth_limit="$OPTIMIZED_DEPTH" \
              --field validation_mode="$OPTIMIZED_VALIDATION"
            
            echo "🚀 Triggered recursive improvement with optimized parameters"
            echo "- Parallel runners: $OPTIMIZED_RUNNERS"
            echo "- Recursion depth: $OPTIMIZED_DEPTH" 
            echo "- Validation mode: $OPTIMIZED_VALIDATION"
          else
            echo "✅ No immediate improvements needed, monitoring continues"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload feedback analysis
        uses: actions/upload-artifact@v4
        with:
          name: recursive-feedback
          path: |
            .taskmaster/feedback/
            FEEDBACK_SUMMARY.md
          retention-days: 180

  # Phase 5: Notification and reporting
  notify-completion:
    runs-on: ubuntu-latest
    needs: [extract-todos, process-todos, consolidate-results, recursive-feedback]
    if: always()
    steps:
      - name: Generate completion notification
        run: |
          echo "📢 Recursive Todo Processing Completed" > notification.md
          echo "" >> notification.md
          echo "## Workflow Summary" >> notification.md
          echo "- **Status**: ${{ job.status }}" >> notification.md
          echo "- **Total Todos**: ${{ needs.extract-todos.outputs.total-todos }}" >> notification.md
          echo "- **Parallel Runners**: ${{ env.MAX_PARALLEL_RUNNERS }}" >> notification.md
          echo "- **Validation Mode**: ${{ env.VALIDATION_MODE }}" >> notification.md
          echo "- **Trigger**: ${{ github.event_name }}" >> notification.md
          echo "" >> notification.md
          echo "## Results" >> notification.md
          echo "View detailed results in the [workflow artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> notification.md
          
          cat notification.md
      
      - name: Post to GitHub discussions (if enabled)
        if: success()
        run: |
          echo "🎉 Todo processing completed successfully!"
          echo "Check the artifacts for detailed results and improvements."