apiVersion: apps/v1
kind: Deployment
metadata:
  name: task-master-ai
  namespace: task-master-ai
  labels:
    app.kubernetes.io/name: task-master-ai
    app.kubernetes.io/instance: production
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: autonomous-ai-system
    app.kubernetes.io/part-of: task-master-platform
    app.kubernetes.io/managed-by: kubernetes
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: task-master-ai
      app.kubernetes.io/instance: production
  template:
    metadata:
      labels:
        app.kubernetes.io/name: task-master-ai
        app.kubernetes.io/instance: production
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/component: autonomous-ai-system
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: task-master-ai
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: task-master-ai
        image: task-master-ai:1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        # API Keys from secrets
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: task-master-api-keys
              key: openai-api-key
        - name: PERPLEXITY_API_KEY
          valueFrom:
            secretKeyRef:
              name: task-master-api-keys
              key: perplexity-api-key
              optional: true
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: task-master-api-keys
              key: anthropic-api-key
              optional: true
        - name: GOOGLE_API_KEY
          valueFrom:
            secretKeyRef:
              name: task-master-api-keys
              key: google-api-key
              optional: true
        - name: GITHUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: task-master-github-token
              key: github-token
              optional: true
        
        # Configuration from ConfigMap
        envFrom:
        - configMapRef:
            name: task-master-config
        
        # Resource limits and requests
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
            ephemeral-storage: "5Gi"
          limits:
            memory: "8Gi"
            cpu: "4000m"
            ephemeral-storage: "20Gi"
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        # Startup probe for slow initialization
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        
        # Volume mounts
        volumeMounts:
        - name: task-data
          mountPath: /.taskmaster
        - name: workspace
          mountPath: /workspace
        - name: cache
          mountPath: /cache
        - name: logs
          mountPath: /logs
        - name: scripts
          mountPath: /scripts
          readOnly: true
        - name: backup
          mountPath: /backup
        
        # Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
        
        # Lifecycle hooks
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - |
                echo "Graceful shutdown initiated..."
                task-master stop --graceful
                sleep 10
      
      # Init container for setup
      initContainers:
      - name: task-master-init
        image: task-master-ai:1.0.0
        command:
        - /bin/sh
        - -c
        - |
          echo "Initializing Task Master AI..."
          mkdir -p /.taskmaster /workspace /cache /logs
          chown -R 1001:1001 /.taskmaster /workspace /cache /logs
          
          if [ ! -f "/.taskmaster/config.json" ]; then
            echo "Creating initial configuration..."
            task-master init --non-interactive
          fi
          
          echo "Initialization complete"
        volumeMounts:
        - name: task-data
          mountPath: /.taskmaster
        - name: workspace
          mountPath: /workspace
        - name: cache
          mountPath: /cache
        - name: logs
          mountPath: /logs
        securityContext:
          runAsUser: 0
          runAsGroup: 0
      
      # Volumes
      volumes:
      - name: task-data
        persistentVolumeClaim:
          claimName: task-master-data
      - name: workspace
        persistentVolumeClaim:
          claimName: task-master-workspace
      - name: cache
        emptyDir:
          sizeLimit: 5Gi
      - name: logs
        emptyDir:
          sizeLimit: 2Gi
      - name: scripts
        configMap:
          name: task-master-scripts
          defaultMode: 0755
      - name: backup
        persistentVolumeClaim:
          claimName: task-master-backup
      
      # Pod scheduling
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - task-master-ai
              topologyKey: kubernetes.io/hostname
      
      # Node selection
      nodeSelector:
        kubernetes.io/arch: amd64
      
      # Tolerations
      tolerations:
      - key: "task-master-ai"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      
      # Termination grace period
      terminationGracePeriodSeconds: 60
      
      # DNS policy
      dnsPolicy: ClusterFirst
      
      # Restart policy
      restartPolicy: Always

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: task-master-ai
  namespace: task-master-ai
  labels:
    app.kubernetes.io/name: task-master-ai
    app.kubernetes.io/component: serviceaccount
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: task-master-ai
  namespace: task-master-ai
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["batch"]
  resources: ["jobs", "cronjobs"]
  verbs: ["create", "get", "list", "watch", "update", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: task-master-ai
  namespace: task-master-ai
subjects:
- kind: ServiceAccount
  name: task-master-ai
  namespace: task-master-ai
roleRef:
  kind: Role
  name: task-master-ai
  apiGroup: rbac.authorization.k8s.io